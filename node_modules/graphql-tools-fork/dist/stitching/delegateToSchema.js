var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var Interfaces_1 = require("../Interfaces");
var transforms_1 = require("../transforms");
var createRequest_1 = require("./createRequest");
var apollo_link_1 = require("apollo-link");
var linkToFetcher_1 = __importDefault(require("./linkToFetcher"));
var observableToAsyncIterable_1 = require("./observableToAsyncIterable");
var iterall_1 = require("iterall");
var mapAsyncIterator_1 = __importDefault(require("./mapAsyncIterator"));
function delegateToSchema(options) {
    if (options instanceof graphql_1.GraphQLSchema) {
        throw new Error('Passing positional arguments to delegateToSchema is deprecated. ' +
            'Please pass named parameters instead.');
    }
    var subschemaOrSubschemaConfig = options.schema, info = options.info, _a = options.operation, operation = _a === void 0 ? createRequest_1.getDelegatingOperation(info.parentType, info.schema) : _a, _b = options.fieldName, fieldName = _b === void 0 ? info.fieldName : _b, _c = options.returnType, returnType = _c === void 0 ? info.returnType : _c, args = options.args, selectionSet = options.selectionSet, fieldNodes = options.fieldNodes;
    var request = createRequest_1.createRequestFromInfo({
        info: info,
        schema: subschemaOrSubschemaConfig,
        operation: operation,
        fieldName: fieldName,
        args: args,
        selectionSet: selectionSet,
        fieldNodes: fieldNodes,
    });
    return delegateRequest(__assign(__assign({}, options), { request: request,
        operation: operation,
        fieldName: fieldName,
        returnType: returnType }));
}
exports.default = delegateToSchema;
function buildDelegationTransforms(subschemaOrSubschemaConfig, info, context, targetSchema, fieldName, returnType, transforms, skipTypeMerging) {
    var delegationTransforms = [
        new transforms_1.CheckResultAndHandleErrors(info, fieldName, subschemaOrSubschemaConfig, context, returnType, skipTypeMerging),
    ];
    if (info.mergeInfo) {
        delegationTransforms.push(new transforms_1.AddReplacementSelectionSets(info.schema, info.mergeInfo.replacementSelectionSets), new transforms_1.AddMergedTypeSelectionSets(info.schema, info.mergeInfo.mergedTypes));
    }
    delegationTransforms = delegationTransforms.concat(transforms);
    delegationTransforms.push(new transforms_1.ExpandAbstractTypes(info.schema, targetSchema));
    if (info.mergeInfo) {
        delegationTransforms.push(new transforms_1.AddReplacementFragments(targetSchema, info.mergeInfo.replacementFragments));
    }
    delegationTransforms.push(new transforms_1.FilterToSchema(targetSchema), new transforms_1.AddTypenameToAbstract(targetSchema));
    return delegationTransforms;
}
function delegateRequest(_a) {
    var request = _a.request, subschemaOrSubschemaConfig = _a.schema, rootValue = _a.rootValue, info = _a.info, _b = _a.operation, operation = _b === void 0 ? createRequest_1.getDelegatingOperation(info.parentType, info.schema) : _b, _c = _a.fieldName, fieldName = _c === void 0 ? info.fieldName : _c, _d = _a.returnType, returnType = _d === void 0 ? info.returnType : _d, context = _a.context, _e = _a.transforms, transforms = _e === void 0 ? [] : _e, skipValidation = _a.skipValidation, skipTypeMerging = _a.skipTypeMerging;
    var targetSchema;
    var subschemaConfig;
    if (Interfaces_1.isSubschemaConfig(subschemaOrSubschemaConfig)) {
        subschemaConfig = subschemaOrSubschemaConfig;
        targetSchema = subschemaConfig.schema;
        rootValue = rootValue || subschemaConfig.rootValue || info.rootValue;
        transforms = transforms.concat((subschemaConfig.transforms || []).slice().reverse());
    }
    else {
        targetSchema = subschemaOrSubschemaConfig;
        rootValue = rootValue || info.rootValue;
    }
    var delegationTransforms = buildDelegationTransforms(subschemaOrSubschemaConfig, info, context, targetSchema, fieldName, returnType, transforms, skipTypeMerging);
    request = transforms_1.applyRequestTransforms(request, delegationTransforms);
    if (!skipValidation) {
        var errors = graphql_1.validate(targetSchema, request.document);
        if (errors.length > 0) {
            throw errors;
        }
    }
    if (operation === 'query' || operation === 'mutation') {
        var executor = createExecutor(targetSchema, rootValue, subschemaConfig);
        var executionResult = executor({
            document: request.document,
            context: context,
            variables: request.variables
        });
        if (executionResult instanceof Promise) {
            return executionResult.then(function (originalResult) {
                return transforms_1.applyResultTransforms(originalResult, delegationTransforms);
            });
        }
        else {
            return transforms_1.applyResultTransforms(executionResult, delegationTransforms);
        }
    }
    else if (operation === 'subscription') {
        var subscriber = createSubscriber(targetSchema, rootValue, subschemaConfig);
        return subscriber({
            document: request.document,
            context: context,
            variables: request.variables,
        }).then(function (subscriptionResult) {
            if (iterall_1.isAsyncIterable(subscriptionResult)) {
                // "subscribe" to the subscription result and map the result through the transforms
                return mapAsyncIterator_1.default(subscriptionResult, function (result) {
                    var _a;
                    var transformedResult = transforms_1.applyResultTransforms(result, delegationTransforms);
                    // wrap with fieldName to return for an additional round of resolutioon
                    // with payload as rootValue
                    return _a = {},
                        _a[info.fieldName] = transformedResult,
                        _a;
                });
            }
            else {
                return transforms_1.applyResultTransforms(subscriptionResult, delegationTransforms);
            }
        });
    }
}
exports.delegateRequest = delegateRequest;
function createExecutor(schema, rootValue, subschemaConfig) {
    var fetcher;
    if (subschemaConfig) {
        if (subschemaConfig.dispatcher) {
            var dynamicLinkOrFetcher = subschemaConfig.dispatcher(context);
            fetcher = (typeof dynamicLinkOrFetcher === 'function') ?
                dynamicLinkOrFetcher :
                linkToFetcher_1.default(dynamicLinkOrFetcher);
        }
        else if (subschemaConfig.link) {
            fetcher = linkToFetcher_1.default(subschemaConfig.link);
        }
        else if (subschemaConfig.fetcher) {
            fetcher = subschemaConfig.fetcher;
        }
        if (!fetcher && !rootValue && subschemaConfig.rootValue) {
            rootValue = subschemaConfig.rootValue;
        }
    }
    if (fetcher) {
        return function (_a) {
            var document = _a.document, context = _a.context, variables = _a.variables;
            return fetcher({
                query: document,
                variables: variables,
                context: { graphqlContext: context }
            });
        };
    }
    else {
        return function (_a) {
            var document = _a.document, context = _a.context, variables = _a.variables;
            return graphql_1.execute({
                schema: schema,
                document: document,
                rootValue: rootValue,
                contextValue: context,
                variableValues: variables,
            });
        };
    }
}
function createSubscriber(schema, rootValue, subschemaConfig) {
    var link;
    if (subschemaConfig) {
        if (subschemaConfig.dispatcher) {
            link = subschemaConfig.dispatcher(context);
        }
        else if (subschemaConfig.link) {
            link = subschemaConfig.link;
        }
        if (!link && !rootValue && subschemaConfig.rootValue) {
            rootValue = subschemaConfig.rootValue;
        }
    }
    if (link) {
        return function (_a) {
            var document = _a.document, context = _a.context, variables = _a.variables;
            var operation = {
                query: document,
                variables: variables,
                context: { graphqlContext: context }
            };
            var observable = apollo_link_1.execute(link, operation);
            return observableToAsyncIterable_1.observableToAsyncIterable(observable);
        };
    }
    else {
        return function (_a) {
            var document = _a.document, context = _a.context, variables = _a.variables;
            return graphql_1.subscribe({
                schema: schema,
                document: document,
                rootValue: rootValue,
                contextValue: context,
                variableValues: variables,
            });
        };
    }
}
//# sourceMappingURL=delegateToSchema.js.map