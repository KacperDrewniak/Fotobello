var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var proxiedResult_1 = require("./proxiedResult");
var defaultMergedResolver_1 = require("./defaultMergedResolver");
var extractFields_1 = require("./extractFields");
var checkResultAndHandleErrors_1 = require("./checkResultAndHandleErrors");
function wrapField(wrapper, fieldName) {
    return createMergedResolver({ fromPath: [wrapper, fieldName] });
}
exports.wrapField = wrapField;
function extractField(fieldName) {
    return createMergedResolver({ toPath: [fieldName] });
}
exports.extractField = extractField;
function renameField(fieldName) {
    return createMergedResolver({ fromPath: [fieldName] });
}
exports.renameField = renameField;
function createMergedResolver(_a) {
    var _this = this;
    var _b = _a.fromPath, fromPath = _b === void 0 ? [] : _b, _c = _a.toPath, toPath = _c === void 0 ? [] : _c;
    return function (parent, args, context, info) { return __awaiter(_this, void 0, void 0, function () {
        var fieldNodes, returnType, parentType, path, fieldName, fromPathLength, fromParentPathLength, i, responseKey, errors, subschemas, result;
        return __generator(this, function (_a) {
            fieldNodes = info.fieldNodes;
            returnType = info.returnType;
            parentType = info.parentType;
            path = info.path;
            toPath.forEach(function (pathSegment) {
                fieldNodes = extractFields_1.extractOneLevelOfFields(fieldNodes, pathSegment, info.fragments);
                parentType = graphql_1.getNamedType(returnType);
                returnType = parentType.getFields()[pathSegment].type;
                path = { prev: path, key: pathSegment };
            });
            if (!fieldNodes.length) {
                return [2 /*return*/, null];
            }
            fromPathLength = fromPath.length;
            if (fromPathLength) {
                fromParentPathLength = fromPathLength - 1;
                for (i = 0; i < fromParentPathLength; i++) {
                    responseKey = fromPath[i];
                    errors = proxiedResult_1.getErrors(parent, responseKey);
                    subschemas = proxiedResult_1.getSubschemas(parent);
                    result = parent[responseKey];
                    if (result == null) {
                        return [2 /*return*/, checkResultAndHandleErrors_1.handleNull(fieldNodes, graphql_1.responsePathAsArray(path), errors)];
                    }
                    parent = checkResultAndHandleErrors_1.handleObject(result, errors, subschemas);
                }
                fieldName = fromPath[fromPathLength - 1];
            }
            if (!fieldName) {
                fieldName = toPath[toPath.length - 1];
            }
            return [2 /*return*/, defaultMergedResolver_1.default(parent, args, context, __assign(__assign({}, info), { fieldName: fieldName,
                    fieldNodes: fieldNodes,
                    returnType: returnType,
                    parentType: parentType,
                    path: path }))];
        });
    }); };
}
exports.createMergedResolver = createMergedResolver;
//# sourceMappingURL=createMergedResolver.js.map