/* tslint:disable:no-unused-expression */
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var utils_1 = require("../utils");
var stitching_1 = require("../stitching");
var ExtendSchema_1 = require("./ExtendSchema");
var WrapType = /** @class */ (function () {
    function WrapType(outerTypeName, innerTypeName, fieldName) {
        var _a, _b, _c, _d;
        this.outerTypeName = outerTypeName;
        this.innerTypeName = innerTypeName;
        this.fieldName = fieldName;
        this.transformer = new ExtendSchema_1.default({
            resolvers: (_a = {},
                _a[outerTypeName] = (_b = {},
                    _b[fieldName] = function (parent) { return parent ? parent : {}; },
                    _b),
                _a),
            fieldNodeTransformerMap: (_c = {},
                _c[outerTypeName] = (_d = {},
                    _d[fieldName] = function (fieldNode, fragments) { return stitching_1.extractFields({ fieldNode: fieldNode, fragments: fragments }); },
                    _d),
                _c)
        });
    }
    WrapType.prototype.transformSchema = function (schema) {
        var _a;
        var typeMap = schema.getTypeMap();
        // Clone the outer type before modification.
        // When healing, changing the type name of a root type changes the root type name.
        var innerType = utils_1.cloneType(typeMap[this.outerTypeName]);
        innerType.name = this.innerTypeName;
        typeMap[this.innerTypeName] = innerType;
        typeMap[this.outerTypeName] = new graphql_1.GraphQLObjectType({
            name: this.outerTypeName,
            fields: (_a = {},
                _a[this.fieldName] = {
                    type: typeMap[this.innerTypeName],
                },
                _a),
        });
        return this.transformer.transformSchema(utils_1.healSchema(schema));
    };
    WrapType.prototype.transformRequest = function (originalRequest) {
        return this.transformer.transformRequest(originalRequest);
    };
    return WrapType;
}());
exports.default = WrapType;
//# sourceMappingURL=WrapType.js.map