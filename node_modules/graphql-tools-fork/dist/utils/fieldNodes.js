var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
function renameFieldNode(fieldNode, name) {
    return __assign(__assign({}, fieldNode), { name: __assign(__assign({}, fieldNode.name), { value: name }) });
}
exports.renameFieldNode = renameFieldNode;
function wrapFieldNode(fieldNode, path) {
    var newFieldNode = fieldNode;
    path.forEach(function (fieldName) {
        newFieldNode = {
            kind: graphql_1.Kind.FIELD,
            name: {
                kind: graphql_1.Kind.NAME,
                value: fieldName,
            },
            selectionSet: {
                kind: graphql_1.Kind.SELECTION_SET,
                selections: [
                    fieldNode,
                ]
            }
        };
    });
    return newFieldNode;
}
exports.wrapFieldNode = wrapFieldNode;
function collectFields(selectionSet, fragments, fields, visitedFragmentNames) {
    if (fields === void 0) { fields = []; }
    if (visitedFragmentNames === void 0) { visitedFragmentNames = {}; }
    selectionSet.selections.forEach(function (selection) {
        switch (selection.kind) {
            case graphql_1.Kind.FIELD:
                fields.push(selection);
                break;
            case graphql_1.Kind.INLINE_FRAGMENT:
                collectFields(selection.selectionSet, fragments, fields, visitedFragmentNames);
                break;
            case graphql_1.Kind.FRAGMENT_SPREAD:
                var fragmentName = selection.name.value;
                if (!visitedFragmentNames[fragmentName]) {
                    collectFields(fragments[fragmentName].selectionSet, fragments, fields, visitedFragmentNames);
                }
                break;
            default: // unreachable
                break;
        }
    });
    return fields;
}
exports.collectFields = collectFields;
//# sourceMappingURL=fieldNodes.js.map